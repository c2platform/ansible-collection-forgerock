---


- name: DSconfig set certificate
  command: "./dsconfig set-connection-handler-prop {{ dsconf_cert|c2platform.forgerock.ds_cmd }}"
  # Skeleton values for the setup are in defaults of DS role, and actual values in group_vars or the Ansible play
  # Note that for dsconfig parameters, IGNORE the Forgerock website docu and use the dsconfig --help info instead!
  # The when: condition reuses the status --offline check outcome in install.yml
  become: yes
  become_user: forgerock
  args:
    chdir: "{{ ds_home }}/{{ ds_home|basename }}-{{ ds_version }}/bin" 
  when:  ds_status is search("The server has not been configured") 
  register: cert_status


- name: Create BKWI subdir
  file:
    path: "{{ ds_home }}/{{ ds_home|basename }}-{{ ds_version }}/bkwi" 
    state: directory
    owner: "{{ ds_owner }}"
    group: "{{ ds_group }}"
    mode: 0755

# Section Set component settings

- name:  DSC-config set lookthrough  
  command: "./dsconfig set-global-configuration-prop {{ dsc_conf_look|c2platform.forgerock.ds_cmd }}"
  become: yes
  become_user: forgerock
  args:
    chdir: "{{ ds_home }}/{{ ds_home|basename }}-{{ ds_version }}/bin" 

- name:  DSC-config set smtp 
  command: "./dsconfig set-global-configuration-prop {{ dsc_conf_smtp|c2platform.forgerock.ds_cmd }}"
  become: yes
  become_user: forgerock
  args:
   chdir: "{{ ds_home }}/{{ ds_home|basename }}-{{ ds_version }}/bin" 
  
  # Section Set connection handler settings

- name: DSC-connectionhandler set LDAP
  command: "./dsconfig set-connection-handler-prop {{ dsc_connect_LDAP|c2platform.forgerock.ds_cmd }}"
  become: yes
  become_user: forgerock
  args:
    chdir: "{{ ds_home }}/{{ ds_home|basename }}-{{ ds_version }}/bin"

- name: DSC-connectionhandler set LDAPS
  command: "./dsconfig set-connection-handler-prop {{ dsc_connect_LDAPS|c2platform.forgerock.ds_cmd }}"
  become: yes
  become_user: forgerock
  args:
    chdir: "{{ ds_home }}/{{ ds_home|basename }}-{{ ds_version }}/bin"

# Section Set log publisher settings

- name: DSC-logpublisher filebased
  command: "./dsconfig set-log-publisher-prop {{ dsc_logger_file|c2platform.forgerock.ds_cmd }}"
  become: yes
  become_user: forgerock
  args:
    chdir: "{{ ds_home }}/{{ ds_home|basename }}-{{ ds_version }}/bin"

- name: Create db schema ldifs
  copy:
    content: "{{ ds_db_schema_ldifs[item] }}"
    remote_src: yes
    dest: "{{ ds_home }}/{{ ds_home|basename }}-{{ ds_version }}/db/schema/./{{ item }}.ldif"
    owner: "{{ ds_owner }}"
    group: "{{ ds_group }}"
    mode: '0640'
  with_items: "{{ ds_db_schema_ldifs }}"

  # Section password validators

- name: Password  Validator -  length
  shell:  "./dsconfig set-password-validator-prop  {{ dsc_validate_length|c2platform.forgerock.ds_cmd }}"
  become: yes
  become_user: forgerock
  args:
    chdir: "{{ ds_home }}/{{ ds_home|basename }}-{{ ds_version }}/bin"

- name: Password  Validator -   similarity
  shell:  "./dsconfig set-password-validator-prop  {{ dsc_validate_similar|c2platform.forgerock.ds_cmd }}"
  become: yes
  become_user: forgerock
  args:
    chdir: "{{ ds_home }}/{{ ds_home|basename }}-{{ ds_version }}/bin"

- name: Password  Validator -   attribute value
  shell:  "./dsconfig set-password-validator-prop  {{ dsc_validate_attrib|c2platform.forgerock.ds_cmd }}"
  become: yes
  become_user: forgerock
  args:
    chdir: "{{ ds_home }}/{{ ds_home|basename }}-{{ ds_version }}/bin"

- name: Password  Validator -   unique characters
  shell:  "./dsconfig set-password-validator-prop  {{ dsc_validate_unique|c2platform.forgerock.ds_cmd }}"
  become: yes
  become_user: forgerock
  args:
    chdir: "{{ ds_home }}/{{ ds_home|basename }}-{{ ds_version }}/bin"

- name: Password  Validator -   character set
  shell:  "./dsconfig set-password-validator-prop  {{ dsc_validate_charset|c2platform.forgerock.ds_cmd }}"
  become: yes
  become_user: forgerock
  args:
    chdir: "{{ ds_home }}/{{ ds_home|basename }}-{{ ds_version }}/bin"

# Section create 3 password p[olicies]

- name: Password policy  - exists Default ?
# The actual check on the result is in the 'when' clauses  for the 2 setups, see below
  shell:  "./dsconfig get-password-policy-prop {{ dsc_pol_default_inquire|c2platform.forgerock.ds_cmd }}"
  become: yes
  become_user: forgerock
  args:
    chdir: "{{ ds_home }}/{{ ds_home|basename }}-{{ ds_version }}/bin"
  register: pol_default_inquire
  ignore_errors: yes


- name: Password policy in case Default does not exist
  shell:  "./dsconfig create-password-policy {{ dsc_pol_default_create|c2platform.forgerock.ds_cmd }}"
  become: yes
  become_user: forgerock
  args:
    chdir: "{{ ds_home }}/{{ ds_home|basename }}-{{ ds_version }}/bin"
  when: pol_default_inquire is search("Password Policy does not exist")
  register: pol_default_actiondone

- name: Password policy in case Default _does_ already  exist
  shell:  "./dsconfig set-password-policy-prop {{ dsc_pol_default_update|c2platform.forgerock.ds_cmd }}"
  become: yes
  become_user: forgerock
  args:
    chdir: "{{ ds_home }}/{{ ds_home|basename }}-{{ ds_version }}/bin"
  when:  not pol_default_inquire is search("Password Policy does not exist")
  register: pol_default_actiondone


- name: Password policy  - exists Service Accounts ?
# The actual check on the result is in the 'when' clauses  for the 2 setups, see below
  shell:  "./dsconfig get-password-policy-prop {{ dsc_pol_servacc_inquire|c2platform.forgerock.ds_cmd }}"
  become: yes
  become_user: forgerock
  args:
    chdir: "{{ ds_home }}/{{ ds_home|basename }}-{{ ds_version }}/bin"
  register: pol_servacc_inquire
  ignore_errors: yes


- name: Password policy in case Service Accounts does not exist
  shell:  "./dsconfig create-password-policy {{ dsc_pol_servacc_create|c2platform.forgerock.ds_cmd }}"
  become: yes
  become_user: forgerock
  args:
    chdir: "{{ ds_home }}/{{ ds_home|basename }}-{{ ds_version }}/bin"
  when: pol_servacc_inquire is search("Password Policy does not exist")
  register: pol_servacc_actiondone


- name: Password policy in case Service Accounts  _does_ already  exist
  shell:  "./dsconfig set-password-policy-prop {{ dsc_pol_servacc_update|c2platform.forgerock.ds_cmd }}"
  become: yes
  become_user: forgerock
  args:
    chdir: "{{ ds_home }}/{{ ds_home|basename }}-{{ ds_version }}/bin"
  when:  not pol_servacc_inquire is search("Password Policy does not exist")
  register: pol_servacc_actiondone


- name: Password policy  - exists JMX Accounts ?
# The actual check on the result is in the 'when' clauses  for the 2 setups, see below
  shell:  "./dsconfig get-password-policy-prop {{ dsc_pol_jmxacc_inquire|c2platform.forgerock.ds_cmd }}"
  become: yes
  become_user: forgerock
  args:
    chdir: "{{ ds_home }}/{{ ds_home|basename }}-{{ ds_version }}/bin"
  register: pol_jmxacc_inquire
  ignore_errors: yes

- name: Password policy in case JMX Accounts does not exist
  shell:  "./dsconfig create-password-policy {{ dsc_pol_jmxacc_create|c2platform.forgerock.ds_cmd }}"
  become: yes
  become_user: forgerock
  args:
    chdir: "{{ ds_home }}/{{ ds_home|basename }}-{{ ds_version }}/bin"
  when: pol_jmxacc_inquire is search("Password Policy does not exist")
  register: pol_jmxacc_actiondone

- name: debug Default update
  debug:
    msg: "{{ dsc_pol_jmxacc_create|c2platform.forgerock.ds_cmd }}"


- name: Password policy in case JMX Accounts  _does_ already  exist
  shell:  "./dsconfig set-password-policy-prop {{ dsc_pol_jmxacc_update|c2platform.forgerock.ds_cmd }}"
  become: yes
  become_user: forgerock
  args:
    chdir: "{{ ds_home }}/{{ ds_home|basename }}-{{ ds_version }}/bin"
  when:  not pol_jmxacc_inquire is search("Password Policy does not exist")
  register: pol_jmxacc_actiondone

# Section add validators to default pw policy

- name:  Default policy - add validator length
  shell:  "./dsconfig set-password-policy-prop {{ dsc_addvalid_length|c2platform.forgerock.ds_cmd }}"
  become: yes
  become_user: forgerock
  args:
    chdir: "{{ ds_home }}/{{ ds_home|basename }}-{{ ds_version }}/bin"

- name:  Default policy - add validator similar
  shell:  "./dsconfig set-password-policy-prop {{ dsc_addvalid_similar|c2platform.forgerock.ds_cmd }}"
  become: yes
  become_user: forgerock
  args:
    chdir: "{{ ds_home }}/{{ ds_home|basename }}-{{ ds_version }}/bin"


- name:  Default policy - add validator  Attribute
  shell:  "./dsconfig set-password-policy-prop {{ dsc_addvalid_attrib|c2platform.forgerock.ds_cmd }}"
  become: yes
  become_user: forgerock
  args:
    chdir: "{{ ds_home }}/{{ ds_home|basename }}-{{ ds_version }}/bin"


- name:  Default policy - add validator  unique
  shell:  "./dsconfig set-password-policy-prop {{ dsc_addvalid_unique|c2platform.forgerock.ds_cmd }}"
  become: yes
  become_user: forgerock
  args:
    chdir: "{{ ds_home }}/{{ ds_home|basename }}-{{ ds_version }}/bin"


- name:  Default policy - add validator  Character
  shell:  "./dsconfig set-password-policy-prop {{ dsc_addvalid_charset|c2platform.forgerock.ds_cmd }}"
  become: yes
  become_user: forgerock
  args:
    chdir: "{{ ds_home }}/{{ ds_home|basename }}-{{ ds_version }}/bin" 

# Section remove unneeded validators from default pw policy


- name: Default policy - exist validator list 
# The actual check on the result is in the 'when' clause for the 4  removes, see below
  shell:  "./dsconfig get-password-policy-prop {{ dsc_validators_inquire|c2platform.forgerock.ds_cmd }}"
  become: yes
  become_user: forgerock
  args:
    chdir: "{{ ds_home }}/{{ ds_home|basename }}-{{ ds_version }}/bin"
  register: default_validator_list

- name: Default policy - remove validator list 8chars
  shell:  "./dsconfig set-password-policy-prop {{ dsc_removvalid_8chars|c2platform.forgerock.ds_cmd }}"
  become: yes
  become_user: forgerock
  args:
    chdir: "{{ ds_home }}/{{ ds_home|basename }}-{{ ds_version }}/bin"
  when: default_validator_list is search("At least 8 characters")

- name: Default policy - remove validator list  Common
  shell:  "./dsconfig set-password-policy-prop {{ dsc_removvalid_common|c2platform.forgerock.ds_cmd }}"
  become: yes
  become_user: forgerock
  args:
    chdir: "{{ ds_home }}/{{ ds_home|basename }}-{{ ds_version }}/bin"
  when: default_validator_list is search("Common passwords")


- name: Default policy - remove validator list Dictionary
  shell:  "./dsconfig set-password-policy-prop {{ dsc_removvalid_dictionary|c2platform.forgerock.ds_cmd }}"
  become: yes
  become_user: forgerock
  args:
    chdir: "{{ ds_home }}/{{ ds_home|basename }}-{{ ds_version }}/bin"
  when: default_validator_list is search("Dictionary")


- name: Default policy - remove validator list  Repeated
  shell:  "./dsconfig set-password-policy-prop {{ dsc_removvalid_repeated|c2platform.forgerock.ds_cmd }}"
  become: yes
  become_user: forgerock
  args:
    chdir: "{{ ds_home }}/{{ ds_home|basename }}-{{ ds_version }}/bin"
  when: default_validator_list is search("Repeated Characters")


 




