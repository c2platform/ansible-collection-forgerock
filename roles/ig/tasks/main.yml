---
- name: Create config routes # note: ig_home is created by IG
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ ig_owner }}"
    group: "{{ ig_group }}"
    mode: 0755
  with_items:
    - "{{ ig_home }}"
    - "{{ ig_home }}/config"
    - "{{ ig_home }}/config/routes"
    - "{{ ig_home }}/scripts"
    - "{{ ig_home }}/scripts/groovy"

- name: Get configs in place
  copy:
    content: "{{ ig_config[item]|to_nice_json(ensure_ascii=False,indent=2) }}"
    dest:  "{{ ig_home }}/config/{{ item }}"
    owner: "{{ ig_owner  }}"
    group: "{{ ig_group }}"
    mode: 0640
  with_items: "{{ ig_config }}"
  when: not item in ig_config_disabled

- name: Disable configs
  file:
    dest:  "{{ ig_home }}/config/{{ item }}"
    state: absent
  with_items: "{{ ig_config_disabled }}"

- name: Get raw configs in place
  copy:
    content: "{{ ig_config_raw[item]['content'] }}"
    dest:  "{{ ig_config_raw[item]['dest'] }}"
    owner: "{{ ig_config_raw[item]['owner']|default(ig_owner) }}"
    group: "{{ ig_config_raw[item]['group']|default(ig_group) }}"
    mode: "{{ ig_config_raw[item]['mode']|default('0640') }}"
  with_items: "{{ ig_config_raw }}"

- name: Configure routes
  copy:
    content: "{{ ig_routes[item]|to_nice_json(ensure_ascii=False,indent=2) }}"
    dest:  "{{ ig_home }}/config/routes/{{ item }}"
    owner: "{{ ig_owner  }}"
    group: "{{ ig_group }}"
    mode: 0755
  with_items: "{{ ig_routes }}"
  when: not item in ig_routes_disabled

- name: Disable routes
  file:
    dest: "{{ ig_home }}/config/routes/{{ item }}"
    state: absent
  with_items: "{{ ig_config_disabled }}"

- name: Rewrite paths
  template:
    src: "{{ item['template']|default('RewritePath.groovy.j2') }}"
    dest: "{{ ig_home }}/scripts/groovy/{{ item['name'] }}.groovy"
    owner: "{{ ig_owner }}"
    group: "{{ ig_group }}"
    mode: 0644
  with_items: "{{ ig_rewrite_paths }}"
  when: ig_rewrite_paths is defined

- name: Wait for IG
  ansible.builtin.uri:
    url: "{{ ig_alive_check['url'] }}"
    status_code: [200]
    return_content: yes
    timeout: 300
    validate_certs: no
  retries: 10
  delay: 20
  register: ig_uri
  until: ig_alive_check['content'] in ig_uri.content
  when: ig_alive_check is defined and ig_alive_check_enabled|default(True)
