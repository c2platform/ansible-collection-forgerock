println 106

// Note $realmName is already set in 103, which is executed prior to this

BODY="""{
    "name" : "$policyName",
    "active" : true,
    "description" : "",
    "resources" : {{ amster_realms[realm]['policy']['resources']|to_nice_json(ensure_ascii=False,indent=2) }},
    "applicationName" : "$policySetName",
    "actionValues": { "GET":true,"POST":true },
    "subject": { "type":"AuthenticatedUsers" },
    "resourceTypeUuid" : "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
    "condition" : {
                "type": "OR",
                "conditions": [
{% for rlm in amster_realms[realm]['policy']['realms'] %}
                    {
                        "authenticateToRealm": "/{{ rlm }}",
                        "type": "AuthenticateToRealm"
                    },
{% endfor %}
                    {
                        "type" : "SessionProperty",
                        "ignoreValueCase" : true,
                        "properties" : {
                            "am.protected.uidIdentifier" : ["{{ amster_realms[realm]['policy']['am_protected_uid_identifier'] }}"]
                        }
                    }
                ]}}"""

// SBP situation: Chef runs this script only when something is changed, so simply create the Policy when it doesn't exist and otherwise update it
// VIPS situation: basically same, see template 104 for details

if(isNull(eval("read Policies --realm $realmName --id $policyName"))){
      if(isNull(eval("create Policies --realm $realmName --id $policyName --body '$BODY'"))) {
            println red("Error creating Policy $policyName in realm $realmName");
      } else {
            println green("Policy $policyName in realm $realmName created");
      }
} else {
      if(isNull(eval("update Policies --realm $realmName --id $policyName --body '$BODY'"))) {
            println red("Error updating Policy $policyName in realm $realmName");
      } else {
            println green("Policy $policyName in realm $realmName updated");
      }
}
