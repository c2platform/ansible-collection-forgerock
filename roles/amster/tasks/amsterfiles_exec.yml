---

- name: Get cot.json in place
  copy:
    dest:  "{{ amster_home }}/{{ amster_home|basename }}-{{ amster_version }}/amster_config/federation/cot.json"
    owner: "{{ am_owner }}"
    group: "{{ am_group }}"
    mode: 0644
    remote_src: yes
    src: "{{ amster_code_location }}/cot.json"


- name: Create the Amster scripts
  template:
    src: "{{ item }}.j2"
    dest: "{{ amster_home }}/{{ amster_home|basename }}-{{ amster_version }}/{{ item }}.amster"
    owner: "{{ am_owner }}"
    group: "{{ am_group }}"
    mode: 0755
  with_items:
     - 090-connect-to-openam
     - 100-installAM_1
     - 101-connect_To_AM
     - 102-set-common-functions
     - 400-set-global-security-settings

# Note for 100-install: we preferred having 100-installAM_1.amster in a multi-line readable format with \ concatenation, but even
# without Ansible this proved too buggy in Amster 6.5 with arguments in quotes. Hence the looooong line :-(
# This applies to the high-level Amster commands like install--openam and export-config; for the lower-level 'Groovy code'
# we'll use multi-line again as that is almost essential for readability.

# Also note that --cookieDomain  is for now hardcoded to the  DNS name of the AM machine. That is not the proper way
# for post-MVP but the whole .amster file logistics change then, with part input from either BKWI git or group_var.
# Hence we left out making an extra Ansible variable for it.


- name: Confirm AM up
  uri:
    url: "http://{{ amster_install_am['serverURL']  }}:8080/am"
    status_code: 200
  register: am_up_result
  until: am_up_result.status == 200
  retries: 10
  delay: 10 # seconds
#  This is a waitloop until AM web interface, assumed needed for the Amster REST calls, is up and running


- name: check ldap connection to ds (check is more or less a random one from within ds role)
# The actual check on the result is in the 'when' clause for the ldap tool, see below.
# Last parameter is dashless hence hardcoded here.
  shell:  "./ldapsearch  {{ dsc_user_reports_inquire|c2platform.forgerock.ds_cmd }} objectclass=person"
  args:
    chdir: "{{ ds_home }}/{{ ds_home|basename }}-{{ ds_version }}/bin"
  register: user_reports_inquire
  ignore_errors: yes

- name: Exit if no running DS service found
  when: not user_reports_inquire is search("Service Account")
  fail: msg="The DS server needed to provision using Amster is not running"



# If Amster is not configured, it will give an error message when trying to use :connect on the Amster command line
# When Amster is configured (100 file, install-openam method), this error message is gone.
# This is increment 1 of the check. Increment 2 will add another scenario: Amster (100 file) configured
# but the outcome of the 090 check modified for a export-config following the connect is proving that not all
# 3 amster-decks (400, 100, 201) were processed.
# So the idempotency model then will become: if 100 file not run, run 100 install deck and all 3 update decks.
# If 100 file run but export-config result is not the SOLL after the 3 update decks, run the 3 update decks.

- name: Check if Amster is configured
  shell: "./amster 090-connect-to-openam.amster"
  register: amster_connect_var
  become: yes
  become_user: "{{ am_owner }}"
  args:
    chdir: "{{ amster_home }}/{{ amster_home|basename }}-{{ amster_version }}/"

#- name: Debug
#  debug:
#    msg: "{{ amster_connect_var }}"

- name: execute 100-installAM_1 amster (don't confuse with 100-configure_AM) if not yet done
  command: "./amster 100-installAM_1.amster"
  register: task_register_var
  become: yes
  become_user: "{{ am_owner }}"
  args:
    chdir: "{{ amster_home }}/{{ amster_home|basename }}-{{ amster_version }}/"
  when: amster_connect_var['stderr'] is search("Could not connect to OpenAM server")
    and amster_connect_var['stderr'] is search("Unexpected character")


- name: Fix the bug in the trust between AM and Amster (after the 100 script creates the buggy config)
# See https://bugster.forgerock.org/jira/browse/OPENAM-11134, the 'from' clause in Authorized keys fails for our setup
  replace:
    path: "{{ am_home }}/{{ am_version }}/openamcfg/amster_rsa.pub"
    regexp: "127.0.0.0"
    replace: "{{ amster_install_am['serveraddress'] }}"

- name: Fix the trust bug part 2
  replace:
    path: "{{ am_home }}/{{ am_version }}/openamcfg/authorized_keys"
    regexp: "127.0.0.0"
    replace: "{{ amster_install_am['serveraddress'] }}"

- name: execute 400 amster deck (with 101 and 102); for now unconditional, increment 2 of idempotency to change this
  command: "./amster 400-set-global-security-settings.amster"
  register: task_register_var
  become: yes
  become_user: "{{ am_owner }}"
  args:
    chdir: "{{ amster_home }}/{{ amster_home|basename }}-{{ amster_version }}/"


- name: Debug
  debug:
    msg: "{{ task_register_var }}"