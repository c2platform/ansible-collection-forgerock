---


- name: Get cot.json in place
  copy:
    dest:  "{{ amster_home }}/{{ amster_home|basename }}-{{ amster_version }}/amster_config/federation/cot.json"
    owner: "{{ amster_owner }}"
    group: "{{ amster_group }}"
    mode: 0644
    remote_src: yes
    src: "{{ amster_code_location }}/cot.json"


- name: Create the single-realm Amster scripts
  template:
    src: "{{ item }}.j2"
    dest: "{{ amster_home }}/{{ amster_home|basename }}-{{ amster_version }}/{{ item }}.amster"
    owner: "{{ amster_owner }}"
    group: "{{ amster_group }}"
    mode: 0755
  with_items:
     - 090-connect-to-openam
     - 100-installAM_1
     - 100-configure_AM
     - 101-connect_To_AM
     - 102-set-common-functions
     - 110-create-authentication-LdapTree
     - 110-function-create-authentication-tree
     - 110-function-delete-authentication-tree
     - 110-function-load-authentication-service
     - 111-configure-global-validation-service
     - 201-configure-SAML
     - 209-function_load_all_saml
     - 210-function-load-authentication-settings
     - 400-set-global-security-settings


# Note for 100-install: we preferred having 100-installAM_1.amster in a multi-line readable format with \ concatenation, but even
# without Ansible this proved too buggy in Amster 6.5 with arguments in quotes. Hence the looooong line :-(
# This applies to the high-level Amster commands like install--openam and export-config; for the lower-level 'Groovy code'
# we'll use multi-line again as that is almost essential for readability.
# Also note that --cookieDomain in 100-install is for now hardcoded to the  DNS name of the AM machine. That is not the proper way
# for post-MVP but the whole .amster file logistics change then, with part input from either BKWI git or group_var.
# Hence we left out making an extra Ansible variable for it.

# Note for 111: though part of the '100-deck' it's called separately from Ansible, not as part of the deck-amsterscript-chain

- name: Create the 3 multi-realm Amster scripts for uwv realm
  vars:
    amster_realmname: "uwv"
    amster_realmfqdn: "{{ amster_uwv_fqdn }}"
  template:
    src: "{{ item.templname }}.j2"
    dest: "{{ amster_home }}/{{ amster_home|basename }}-{{ amster_version }}/{{item.amstername }}.amster"
    owner: "{{ amster_owner }}"
    group: "{{ amster_group }}"
    mode: 0755
  with_items:
     - { templname: 103-configure_realm, amstername: uwv-103-configure_realm }
     - { templname: 107-update-identity-store, amstername: uwv-107-update-identity-store }
     - { templname: 108-set-sessionproperties, amstername: uwv-108-set-sessionproperties }


- name: Create the 6 multi-realm Amster scripts for suwinet realm
  vars:
    amster_realmname: "suwinet"
    amster_realmfqdn: "{{ amster_suwi_fqdn }}"
  template:
    src: "{{ item.templname }}.j2"
    dest: "{{ amster_home }}/{{ amster_home|basename }}-{{ amster_version }}/{{item.amstername }}.amster"
    owner: "{{ amster_owner }}"
    group: "{{ amster_group }}"
    mode: 0755
  with_items:
     - { templname: 103-configure_realm, amstername: suwinet-103-configure_realm }
     - { templname: 104-create-J2EE_Agent, amstername: suwinet-104-create-J2EE_Agent }
     - { templname: 105-create-policy-set, amstername: suwinet-105-create-policy-set }
     - { templname: 106-create-policy, amstername: suwinet-106-create-policy }
     - { templname: 107-update-identity-store, amstername: suwinet-107-update-identity-store }
     - { templname: 108-set-sessionproperties, amstername: suwinet-108-set-sessionproperties }

- name: Confirm AM up
  uri:
    url: "{{ amster_am_install['serverUrl'] }}"
    validate_certs: no
    status_code: 200
  register: am_up_result
  until: am_up_result.status == 200
  retries: 10
  delay: 10 # seconds
#  This is a waitloop until AM web interface, assumed needed for the Amster REST calls, is up and running


- name: check ldap connection to ds (check is more or less a random one from within ds role)
# The actual check on the result is in the 'when' clause for the ldap tool, see below.
# Last parameter is dashless hence hardcoded here.
  shell:  "./ldapsearch  {{ dsc_user_reports_inquire|c2platform.forgerock.ds_cmd }} objectclass=person"
  args:
    chdir: "{{ ds_home }}/{{ ds_home|basename }}-{{ ds_version }}/bin"
  register: user_reports_inquire
  ignore_errors: yes

- name: Exit if no running DS service found
  when: not user_reports_inquire is search("Service Account")
  fail: msg="The DS server needed to provision using Amster is not running"



# If Amster is not configured, it will give an error message when trying to use :connect on the Amster command line
# When Amster is configured (100 file, install-openam method), this error message is gone.
# This is increment 1 of the check. Increment 2 might add another scenario: Amster (100 file) configured
# but the outcome of the 090 check modified for a export-config following the connect is proving that not all
# 3 amster-decks (400, 100, 201) were processed. TODO: as e.g. (SBP) 104 is now (SBP) run when settings
# have changed, which could be var values or template hardcoded values, make sure that this SOLL-check
# (using export-config method) not only detects 'not all 3 decks were run fully according to the _then_ desired
# state', but same according to the _now_ desired state. Challenging, hence this is an ongoing VIPS team discussion.

# So the idempotency model then will become: if 100 file not run, run 100 install deck and all 3 update decks.
# If 100 file run but export-config result is not the SOLL after the 3 update decks, run the 3 update decks.

- name: Check if Amster is configured
  shell: "./amster 090-connect-to-openam.amster"
  register: amster_connect_var
  become: yes
  become_user: "{{ amster_owner }}"
  args:
    chdir: "{{ amster_home }}/{{ amster_home|basename }}-{{ amster_version }}/"

#- name: Debug
#  debug:
#    msg: "{{ amster_connect_var }}"

- name: execute 100-installAM_1 amster (don't confuse with 100-configure_AM) if not yet done
  command: "./amster 100-installAM_1.amster"
  register: task_register_var
  become: yes
  become_user: "{{ amster_owner }}"
  args:
    chdir: "{{ amster_home }}/{{ amster_home|basename }}-{{ amster_version }}/"
  when: amster_connect_var['stderr'] is search("Could not connect to OpenAM server")
    and amster_connect_var['stderr'] is search("Unexpected character")


- name: execute 100-configure amster deck (a chain of 10+ others); unconditional as the idempotency is done in the Groovy script code
  command: "./amster 100-configure_AM.amster"
  register: task_register_var
  become: yes
  become_user: "{{ amster_owner }}"
  args:
    chdir: "{{ amster_home }}/{{ amster_home|basename }}-{{ amster_version }}/"

- name: Debug
  debug:
    msg: "{{ task_register_var }}"


- name: execute 111-configure amster (a separate part of the 100-deck); unconditional as the idempotency is done in the Groovy script code
  command: "./amster 111-configure-global-validation-service.amster"
  register: task_register_var
  become: yes
  become_user: "{{ amster_owner }}"
  args:
    chdir: "{{ amster_home }}/{{ amster_home|basename }}-{{ amster_version }}/"

- name: Debug
  debug:
    msg: "{{ task_register_var }}"

- name: execute 201 amster deck; unconditional as the idempotency is done in the Groovy script code
  command: "./amster 201-configure-SAML.amster"
  register: task_register_var
  become: yes
  become_user: "{{ amster_owner }}"
  args:
    chdir: "{{ amster_home }}/{{ amster_home|basename }}-{{ amster_version }}/"
  environment:
    AMSTER_VERSION: 6.5.3
    OPENAM_REALM: uwv
    OPENAM_COT: uwv_cot_uwv
    AMSTER_COT_FILE: /opt/amster/amster-6.5.3/amster_config/federation/cot.json
    SAML_DIR: /opt/amster/amster-6.5.3/amster_config/federation/uwv/uwv_cot_uwv

# For now kept upper case, as they used with Chef (the 201 deck grabs these values)
# The specs tell to repeat the 201 'for each realm' but currently the sole SAML realm is uwv.
# TBD to parametrise the environment vars when another SAML realm  would be added; but there is more work then,
# also possibly adding another file like cot.json (amsterbasics.yml)

- name: Debug
  debug:
    msg: "{{ task_register_var }}"

#- name: execute 400 amster deck (with 101 and 102); unconditional as the idempotency is done in the Groovy script code
#  command: "./amster 400-set-global-security-settings.amster"
#  register: task_register_var
#  become: yes
#  become_user: "{{ amster_owner }}"
#  args:
#    chdir: "{{ amster_home }}/{{ amster_home|basename }}-{{ amster_version }}/"


