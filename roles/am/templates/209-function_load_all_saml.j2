{{ ansible_managed|comment(decoration="// ") }}
{{ item|c2platform.forgerock.amster_script_header|comment(decoration="// ") }}
:load 101-connect_To_AM.amster
:load 102-set-common-functions.amster
try {
{{ lookup('template', './params.groovy.j2')|indent(2, True) }}

    // GET Realm
    currentRealm = eval("read Realms --global --id '${("/" + realmName).bytes.encodeBase64().toString()}'".toString())
    if (isNull(currentRealm)) {
        println("Unable to update COT as the realm $realmName is unknown")
    } else {
        // Check if realm already exists, if not then create
        currentCot = eval("read CircleOfTrust --realm $realmName --id $cotName")
        if (isNull(currentCot)) {
            println("Create COT")
            eval("import-config --failOnError --path $fileCot")
        } else {
            println("COT $cotName already exists")
        }
    }

    // GET all SAML entities in directory
    // From directory - dir/Entity
    dir = new File(dirSaml)
    list = [];
    bodyBuilder = new groovy.json.JsonBuilder()
    currentCot = eval("read CircleOfTrust --realm $realmName --id $cotName")
    slurped = new groovy.json.JsonSlurper().parseText(currentCot)

    dir.traverse(type: groovy.io.FileType.DIRECTORIES, maxDepth: 0) { it ->
        samlMetadataFile = "$it/meta.xml"
        samlMetadataExtFile = "$it/metaext.xml"
        samlMetadata = new File(samlMetadataFile)
        samlMetadataExt = new File(samlMetadataExtFile)
        samlEntityName = new XmlParser().parseText(samlMetadata.text).@entityID
        if (samlMetadataExt.exists()) {
            bodyBuilder 'metadata': groovy.json.StringEscapeUtils.escapeJava(samlMetadata.text), 'entityConfig': groovy.json.StringEscapeUtils.escapeJava(samlMetadataExt.text)
        } else {
            bodyBuilder 'metadata': groovy.json.StringEscapeUtils.escapeJava(samlMetadata.text)
        }

        // Check if SAML Entity exists
        saml_current = eval("read Saml2Entity --realm $realmName --id $samlEntityName")
        if (isNull(saml_current)) {
            println green("{{ am_amster_stdout_tags['changed'] }} Create SAML Entity $samlEntityName")
            eval("create Saml2Entity --realm $realmName --id $samlEntityName --body '$bodyBuilder'")
        } else {
            eval("update Saml2Entity --realm $realmName --id $samlEntityName --body '$bodyBuilder'")
            saml_new = eval("read Saml2Entity --realm $realmName --id $samlEntityName")
            if (resourceChange(saml_current,saml_new)) { println green("{{ am_amster_stdout_tags['changed'] }} SAML Entity $samlEntityName updated") }
        }

        // Add SAML entity to COT
        println("Add to COT $cotName")
        entityIdCot = samlEntityName
        currentCot = eval("read CircleOfTrust --realm $realmName --id $cotName")
        slurped = new groovy.json.JsonSlurper().parseText(currentCot)
        if (slurped.trustedProviders.contains(entityIdCot)) {
            println("SAML Entity $samlEntityName already part of COT $cotName")
        } else {
            bodyBuilder = new groovy.json.JsonBuilder();
            bodyBuilder 'trustedProviders': slurped.trustedProviders + entityIdCot
            eval("update CircleOfTrust --realm $realmName --id $cotName --body '$bodyBuilder'")
            println green("{{ am_amster_stdout_tags['changed'] }} CircleOfTrust $cotName was updated with SAML entity")
        }
    }
} catch(Exception e) {
   println("{{ am_amster_stdout_tags['error'] }} ${e.getMessage()} ")
}
:quit