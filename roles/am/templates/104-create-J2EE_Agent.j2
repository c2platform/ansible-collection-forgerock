{{ ansible_managed|comment(decoration="// ") }}
{{ item|c2platform.forgerock.amster_script_header|comment(decoration="// ") }}
connect {{ am_connect|c2platform.forgerock.ds_cmd }} {{ amster_am_install['serverUrl'] }}
{{ am_amster_common_functions }}
try {
{{ lookup('template', './params.groovy.j2')|indent(2, True) }}

  igREMOTELOGFILE='amAgent_$realmName_agent_8443.log'


  BODY="""
  {
      "userDataCachePollingTime" : 1,
      "serviceDataCacheTime" : 1,
      "loginProbeTimeout" : 2000,
      "loginUrlPrioritized" : true,
      "policyClientResourceComparators" : "$policyClientResourceComparators",
      "policyEvaluationApplication" : "$policyEvaluationApplication",
      "policyEvaluationRealm" : "/$realmName",
      "policyClientCacheMode" : "$policyClientCacheMode",
      "authServiceHost" : "$amFQDN",
      "conditionalLogoutUrl" : [ "" ],
      "logoutProbeTimeout" : 2000,
      "amLogoutUrl" : [ "$amPROTO://$amFQDN:$amPORT/$amURI/UI/Logout" ],
      "clientPollingPeriod" : 180,
      "amLoginUrl" : [ "$amLoginUrl" ],
      "policyActionBooleanValues" : "iPlanetAMWebAgentService|GET|allow|deny:iPlanetAMWebAgentService|POST|allow|deny:iPlanetAMWebAgentService|PUT|allow|deny:iPlanetAMWebAgentService|DELETE|allow|deny:iPlanetAMWebAgentService|HEAD|allow|deny:iPlanetAMWebAgentService|OPTIONS|allow|deny:iPlanetAMWebAgentService|PATCH|allow|deny",
      "policyClientClockSkew" : 10,
      "urlPolicyEnvPostParameters" : [ "" ],
      "useRedirectForCompositeAdvice" : false,
      "urlPolicyEnvJsessionParameters" : [ "" ],
      "probeLoginUrl" : true,
      "policyClientPollingInterval" : 3,
      "urlPolicyEnvGetParameters" : [ "" ],
      "authServiceProtocol" : "http",
      "userDataCacheNotifications" : true,
      "policyNotifications" : true,
      "serviceDataCacheNotifications" : true,
      "logoutUrlPrioritized" : true,
      "probeLogoutUrl" : true,
      "authServicePort" : $amPORT,
      "enableClientPolling" : false,
      "conditionalLoginUrl" : [ "" ],
      "redirectAttemptLimit" : 0,
      "auditLogLocation" : "REMOTE",
      "fqdnMapping" : { },
      "filterMode" : { "" : "ALL" },
      "remoteLogFilename" : "$igREMOTELOGFILE",
      "userAttributeName" : "uid",
      "userTokenName" : "UserToken",
      "loginAttemptLimit" : 0,
      "agentgroup" : null,
      "customResponseHeader" : { },
      "fqdnCheck" : false,
      "status" : "Active",
      "localAuditLogRotation" : false,
      "webSocketConnectionIntervalInMinutes" : 30,
      "agentConfigChangeNotificationsEnabled" : true,
      "userpassword" : "$agentPassword",
      "httpSessionBinding" : true,
      "userPrincipalFlag" : false,
      "configurationReloadInterval" : 0,
      "auditAccessType" : "LOG_NONE",
      "cdssoRootUrl" : [ "agentRootURL=$igPROTO://$igFQDN:$igPORT" ],
      "debugLevel" : "error",
      "fqdnDefault" : "$igFQDN",
      "agentNotificationUrl" : "$amPROTO://$amFQDN:$amPORT/$amURI/agentapp/notification",
      "localAuditRotationSize" : 52428800,
      "jwtName" : "am-auth-jwt",
      "userMappingMode" : "USER_ID",
      "repositoryLocation" : "centralized",
      "notEnforcedUrisCacheSize" : 1000,
      "loginFormUri" : [ "" ],
      "notEnforcedRuleCompoundSeparator" : "|",
      "useInternalLogin" : true,
      "loginContentFile" : "FormLoginContent.txt",
      "logoutEntryUri" : { },
      "profileAttributeMap" : { },
      "headerAttributeDateFormat" : "EEE, d MMM yyyy hh:mm:ss z",
      "notEnforcedUrisRefreshSessionIdleTime" : false,
      "shortenedPrivilegeAttributeValues" : false,
      "profileAttributeFetchMode" : "NONE",
      "privilegedSessionAttribute" : [ "" ],
      "applicationLogoutUris" : { },
      "customAuthenticationHandlers" : { },
      "responseAttributeMap" : { },
      "responseAttributeFetchMode" : "NONE",
      "privilegedAttributesToLowerCase" : { "Role":"false","Group":"false" },
      "cookieAttributeMultiValueSeparator" : "|",
      "loginErrorUri" : [ "" ],
      "customVerificationHandlers" : { },
      "privilegedAttributeType" : [ "Group", "Role"  ],
      "sessionAttributeFetchMode" : "NONE",
      "cookieAttributeUrlEncoded" : true,
      "invertNotEnforcedUris" : false,
      "continuousSecurityHeaders" : { },
      "privilegedAttributeMap" : { },
      "customLogoutHandlers" : { },
      "notEnforcedIpsCacheSize" : 1000,
      "applicationLogoutHandlers" : { },
      "logoutRequestParameters" : { },
      "notEnforcedIpsCacheEnabled" : true,
      "resourceAccessDeniedUri" : { },
      "defaultPrivilegedAttributes" : [ "AUTHENTICATED_USERS" ],
      "continuousSecurityCookies" : { },
      "invertNotEnforcedIps" : false,
      "notEnforcedUrisCacheEnabled" : true,
      "notEnforcedUris" : [ "" ],
      "notEnforcedIps" : [ "" ],
      "privilegedAttributeMappingEnabled" : true,
      "logoutIntrospection" : false,
      "sessionAttributeMap" : { },
      "postDataPreserveCacheEntryMaxEntries" : 1000,
      "alternativeAgentHostname" : null,
      "webServiceInternalErrorContentFile" : "WSInternalErrorContent.txt",
      "missingPostDataPreservationEntryUri" : [ "" ],
      "webServiceProcessGetEnabled" : true,
      "webServiceEnabled" : false,
      "alternativeAgentProtocol" : null,
      "webServiceAuthorizationErrorContentFile" : "WSAuthErrorContent.txt",
      "clientHostnameHeader" : null,
      "postDataPreserveCacheEntryMaxTotalSizeMb" : -1,
      "webServiceResponseProcessor" : null,
      "webServiceAuthenticator" : null,
      "possibleXssCodeElements" : [ "" ],
      "webServiceEndpoints" : [ "" ],
      "postDataCacheTtl" : 300000,
      "postDataPreservation" : false,
      "postDataStickySessionKeyValue" : null,
      "xssDetectionRedirectUri" : { },
      "customProperties" : [ ],
      "postDataStickySessionMode" : "URL",
      "jbossWebAuthenticationAvailable" : false,
      "alternativeAgentPort" : null,
      "clientIpHeader" : null,
      "legacyUserAgentList" : [ "Mozilla/4.7*" ],
      "encryptionProvider" : "com.iplanet.services.util.JCEEncryption",
      "localeLanguage" : "en",
      "portCheckFile" : "PortCheckContent.txt",
      "legacyRedirectUri" : "/agentapp/sunwLegacySupportURI",
      "ignorePathInfo" : false,
      "localeCountry" : "US",
      "gotoParameterName" : "goto",
      "portCheckSetting" : { "$amPORT":"$amPROTO" },
      "portCheckEnabled" : false,
      "legacyUserAgentSupport" : false,
      "bypassPrincipalList" : [ "" ],
      "cookieResetDomains" : {  },
      "cdssoTrustedIdProvider" : [ "$igPROTO://$igFQDN/$amURI/cdcservlet" ],
      "cdsso" : false,
      "cdssoUrls" : [ "$igPROTO://igFQDN/$amURI/cdcservlet" ],
      "cdssoDomainList" : [ "" ],
      "cdssoRedirectUri" : "/agentapp/sunwCDSSORedirectURI",
      "cookieResetNames" : [ "" ],
      "cookieResetEnabled" : false,
      "cookieResetPaths" : { },
      "amCookieName" : "$amCookieName",
      "ssoCacheEnabled" : true,
      "cdssoSecureCookies" : false,
      "cdssoClockSkew" : 0 }
    }
    """;
      if(isNull(eval("read J2eeAgents --realm $realmName --id $agentName"))){
      // TODO read WebAgents --realm Realm --id id
      if(isNull(eval("create J2eeAgents --realm $realmName --id $agentName --body '$BODY'"))) {
                  println red("{{ am_amster_stdout_tags['error'] }} Error creating J2eeAgent $agentName in realm $realmName");
            } else {
                  println green("{{ am_amster_stdout_tags['changed'] }} J2eeAgent $agentName in realm $realmName created");
            }
      } else {
            if(isNull(eval("update J2eeAgents --realm $realmName --id $agentName --body '$BODY'"))) {
                  println red("{{ am_amster_stdout_tags['error'] }} Error updating J2eeAgent $agentName in realm $realmName");
            } else {
                  println green("J2eeAgent $agentName in realm $realmName updated");
            }
      }
} catch(Exception e) {
   println("{{ am_amster_stdout_tags['error'] }} ${e.getMessage()} ")
}
:quit
