{{ ansible_managed|comment(decoration="// ") }}
connect {{ amster_am_connect|c2platform.forgerock.ds_cmd }} {{ amster_am_install['serverUrl'] }}
{{ am_amster_common_functions }}
try {
{{ lookup('template', './params.groovy.j2')|indent(2, True) }}

  BODY="""{
    "name" : "$policyName",
    "active" : true,
    "description" : "",
    "resources" : {{ item['vars']['resources']|to_nice_json(ensure_ascii=False,indent=2) }},
    "applicationName" : "$policySetName",
    "actionValues": { "GET":true,"POST":true },
    "subject": { "type":"AuthenticatedUsers" },
    "resourceTypeUuid" : "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
    "condition" : {
                "type": "OR",
                "conditions": [
{% for rlm in item['vars']['realms'] %}
                    {
                        "authenticateToRealm": "/{{ rlm }}",
                        "type": "AuthenticateToRealm"
                    },
{% endfor %}
                    {
                        "type" : "SessionProperty",
                        "ignoreValueCase" : true,
                        "properties" : {
                            "am.protected.uidIdentifier" : ["{{ item['vars']['am.protected.uidIdentifier'] }}"]
                        }
                    }
                ]}}"""

      if(isNull(eval("read Policies --realm $realmName --id $policyName"))){
            if(isNull(eval("create Policies --realm $realmName --id $policyName --body '$BODY'"))) {
                  println red("{{ am_amster_stdout_tags['error'] }} creating Policy $policyName in realm $realmName");
            } else {
                  println green("{{ am_amster_stdout_tags['changed'] }} Policy $policyName in realm $realmName created");
            }
      } else {
            if(isNull(eval("update Policies --realm $realmName --id $policyName --body '$BODY'"))) {
                  println red("{{ am_amster_stdout_tags['error'] }} updating Policy $policyName in realm $realmName");
            } else {
                  println green("{{ am_amster_stdout_tags['changed'] }} Policy $policyName in realm $realmName updated");
            }
      }
} catch(Exception e) {
   println("{{ am_amster_stdout_tags['error'] }} ${e.getMessage()} ")
}
:quit