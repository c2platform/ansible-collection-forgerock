{{ ansible_managed|comment(decoration="// ") }}
connect {{ amster_am_connect|c2platform.forgerock.ds_cmd }} {{ amster_am_install['serverUrl'] }}
{{ am_amster_common_functions }}
try {
{{ lookup('template', './params.groovy.j2')|indent(2, True) }}

  BODY="""{
        "name": "$policySetName",
        "displayName": "$policySetName",
        "applicationType": "iPlanetAMWebAgentService",
        "conditions": [ "LEAuthLevel","Policy","Script","AuthenticateToService","SimpleTime","AMIdentityMembership","OR","IPv6","IPv4","SessionProperty","AuthScheme","AuthLevel","NOT","Transaction","AuthenticateToRealm","AND","ResourceEnvIP","LDAPFilter","OAuth2Scope","Session" ],
        "subjects": [ "Policy","NOT","OR","JwtClaim","AuthenticatedUsers","AND","Identity","NONE" ],
        "resourceTypeUuids": ["76656a38-5f8e-401b-83aa-4ccb74ce88d2"],
        "entitlementCombiner": "DenyOverride",
        "attributeNames": [ ],
        "editable": true,
        "_id": "$policySetName"}"""

      cur_app = eval("read Applications --realm $realmName --id $policySetName")
      if(isNull(cur_app)){
            if(isNull(eval("create Applications --realm $realmName --body '$BODY'"))) {
                  println red("{{ am_amster_stdout_tags['error'] }} creating Application $policySetName in realm $realmName");
            } else {
                  println green("{{ am_amster_stdout_tags['changed'] }} Application $policySetName in realm $realmName created");
            }
      } else {
            if(isNull(eval("update Applications --realm $realmName --id $policySetName --body '$BODY'"))) {
                  println red("{{ am_amster_stdout_tags['error'] }} updating Application $policySetName in realm $realmName");
            } else {
                  println green("Application $policySetName in realm $realmName submitted for update");
            }
      }
      new_app = eval("read Applications --realm $realmName --id $policySetName")
      if (resourceChange(cur_app, new_app, true)) {
          println green("{{ am_amster_stdout_tags['changed'] }} Application $policySetName in realm $realmName updated");
      }
} catch(Exception e) {
   println("{{ am_amster_stdout_tags['error'] }} ${e.getMessage()} ")
}
:quit
