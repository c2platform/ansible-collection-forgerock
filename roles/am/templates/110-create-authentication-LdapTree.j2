{{ ansible_managed|comment(decoration="// ") }}
connect {{ amster_am_connect|c2platform.forgerock.ds_cmd }} {{ amster_am_install['serverUrl'] }}
{{ am_amster_common_functions }}
try {
{{ lookup('template', './params.groovy.j2')|indent(2, True) }}

    // deletion Flag -> set to true, if tree should be deleted
    deleteTree = true

    //static variables:
    // Nodes
    authenticationNodeGUID = "a86b4416-f11e-4ca5-900a-af200ee2229a"
    usernameCollectorGUID = "a86b4416-f12e-4ca5-900a-af200ee2229a"
    passwordCollectorGUID = "a86b4416-f13e-4ca5-900a-af200ee2229a"
    ldapSuwinetNodeGUID = "a86b4416-f14e-4ca5-900a-af200ee2229a"

    // LDAP
    nodeName='LDAP Decision'
    // searchScope one of SUBTREE, OBJECT, ONE_LEVEL
    searchScope='SUBTREE'
    //ldapConnectioMode one of LDAP, LDAPS, START_TLS
    ldapConnectionMode= 'LDAPS'
    //one of
    returnUserDn=true
    userCreationAttrs=''
    minPwdLength=8
    beheraEnabled=true
    trustAllServerCerts=true
    heartBeatInterval=10
    // timunit on of SECONDS, MINUTES, HOURS
    heartBeatTimeUnit='SECONDS'
    // time out 0 means disabled
    ldapOperationTimeOutMilliSeconds=0

    //these guids are hardcoded
    successNode = "70e691a5-1e33-4ac3-a356-e7b6d60d92e0"
    failureNode = 'e301438c-0bd0-429c-ab0c-66126501069a'

    println cyan("Entered realm = '$realmName' to set ldap tree")

} catch(Exception e) {
   println("{{ am_amster_stdout_tags['error'] }} ${e.getMessage()} ")
}
{% if item['scripts'] is defined %}
{%   set scrpts = item['scripts'] %}
{% else %}
{%   set scrpts = am_amster_templates[item['template']]['scripts'] %}
{% endif %}

{% for scrpt in scrpts %}
    :load  '{{ amster_home_version }}/{{ scrpt }}.amster'
{% endfor %}
:quit