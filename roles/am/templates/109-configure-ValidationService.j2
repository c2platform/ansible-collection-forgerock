{{ ansible_managed|comment(decoration="// ") }}
{{ item|c2platform.forgerock.amster_script_header|comment(decoration="// ") }}
:load 101-connect_To_AM.amster
:load 102-set-common-functions.amster
try {
{{ lookup('template', './params.groovy.j2')|indent(2, True) }}

      slurped = new groovy.json.JsonSlurper().parseText ('{}')
      slurped.validGotoDestinations = validGotoDestinations
      bodyBuilder = new groovy.json.JsonBuilder();
      bodyBuilder 'validGotoDestinations': slurped.validGotoDestinations

      currentValidation = eval("read ValidationService --realm $realmName")
      if(isNull(currentValidation)){
            if(isNull(eval("create ValidationService --realm $realmName --body '$bodyBuilder'"))) {
                  println red("{{ am_amster_stdout_tags['error'] }} creating ValidationService in realm $realmName");
            } else {
                  println green("{{ am_amster_stdout_tags['changed'] }} ValidationService in realm $realmName created");
            }
      } else {
            if(isNull(eval("update ValidationService --realm $realmName --body '$bodyBuilder'"))) {
                  println red("{{ am_amster_stdout_tags['error'] }} updating ValidationService in realm $realmName");
            } else {
                  println("Updating ValidationService in realm $realmName");
                  newValidation = eval("read ValidationService --realm $realmName")
                  if (resourceChange(currentValidation, newValidation)) {
                      println green("{{ am_amster_stdout_tags['changed'] }} ValidationService in realm $realmName updated");
                  }
            }
      }
} catch(Exception e) {
   println("{{ am_amster_stdout_tags['error'] }} ${e.getMessage()} ")
}
:quit