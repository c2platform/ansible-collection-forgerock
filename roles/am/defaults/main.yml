---
amster_version: 6.5.3
amster_home: /opt/amster
amster_home_version: "{{ amster_home }}/{{ amster_home|basename }}-{{ amster_version }}"
amster_home_link: "{{ amster_home  }}/{{ amster_home|basename }}"

amster_ds_hostname: "{{ ansible_fqdn }}"
amster_ds_rootpw: supersecret
amster_amadmin_pw: supersecure # password that Amster sets amAdmin

amster_encryptpw: C2ITMXJ1I8BSp61bmJbp4oBaOjBDC6Xi

# TODO remove
am_home: /opt/am
am_version: 6.5.3

amster_versions:
  6.5.3:
    url: file:///vagrant/downloads/Amster-6.5.3.zip
    checksum: "sha256: 933f97cabd60ac37073229729668461993c99db4f56ff7ad02eb055f663ecae8"

amster_owner: tomcat
amster_group: tomcat

amster_download_dir: /tmp

amster_code_location: /vagrant/downloads

# These two to move to the PW vault mechanism chosen
amster_bindusrpwd: supersecret

amster_ds_connect:
  hostname: "{{ amster_ds_hostname }}"
  port: 4444
  bindDN: '"cn=Directory Manager"'
  bindPassword: "{{ amster_ds_rootpw }}"
  trustAll: ""

amster_am_connect:
  private-key: /opt/tomcat/am/

amster_scripts:
  - 090-connect-to-openam
  - 100-installAM_1
  - 100-configure_AM
  - 101-connect_To_AM
  - 102-set-common-functions
  - 110-create-authentication-LdapTree
  - 110-function-create-authentication-tree
  - 110-function-delete-authentication-tree
  - 110-function-load-authentication-service
  - 111-configure-global-validation-service
  - 112-configure-top-level-realm
  - 201-configure-SAML
  - 208-function_create_federation_module
  - 209-function_load_all_saml
  - 210-function-load-authentication-settings
  - 400-set-global-security-settings

am_amster_templates:
  - 090-connect-to-openam
  - 100-installAM_1
  - 100-configure_AM
#  - 101-connect_To_AM
#  - 102-set-common-functions
  - 103-configure_realm
#  - 104-create-j2EE_agent
#  - 105-create-policy-set
#  - 106-create-policy
#  - 107-update-identity-store
#  - 108-set-sessionproperties
#  - 110-create-authentication-LdapTree
#  - 110-function-create-authentication-tree
#  - 110-function-delete-authentication-tree
#  - 110-function-load-authentication-service
#  - 111-configure-global-validation-service
#  - 112-configure-top-level-realm
#  - 201-configure-SAML
#  - 208-function_create_federation_module
#  - 209-function_load_all_saml
#  - 210-function-load-authentication-settings
#  - 400-set-global-security-settings

am_amster_common_functions: |
  static String red(String text)    { "\u001B[31m" + text + "\u001B[39m" }
  static String green(String text)  { "\u001B[32m" + text + "\u001B[39m" }
  static String yellow(String text) { "\u001B[33m" + text + "\u001B[39m" }
  static String blue(String text)   { "\u001B[34m" + text + "\u001B[39m" }
  static String magenta(String text){ "\u001B[35m" + text + "\u001B[39m" }
  static String cyan(String text)   { "\u001B[36m" + text + "\u001B[39m" }
  static String todo(String text)   { "\u001B[7m\u001B[33m" + "TODO: " + text + "\u001B[0m" }
  static String arrayToEscapedString(Object obj)   { obj.size() == 0 ? "[]" : "[\""+obj.join("\", \"")+"\"]" }
  static boolean isNull(Object obj) { (null==obj||"null".equalsIgnoreCase(obj))}

  //todo? helper to accept String false in a condition? :: static Boolean containsFalse String(Object obj) { "False".equalsIgnoreCase(obj.toString()) || false == obj }

am_amster_stdout_tags:
  changed: "##CHANGED##"
  error: "##ERROR##"

am_amster_params_check: |
  params.eachWithIndex { v, i ->
      println(v.getKey())
      println(v.getValue())
      if ( v.getValue() == null) {
        throw new Exception("Params ${v.getKey()} is missing!")
      }
  }