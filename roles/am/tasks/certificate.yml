---
- name: Shared secrets
  file:
    path: "{{ am_shared_secrets  }}"
    state: directory
    mode: 0700

- name: AM cert
  copy:
    content: "{{ am_certificate[item]['cert'] }}"
    dest: "{{ am_shared_secrets }}/{{ item }}.crt"
    mode: '600'
  register: am_c

- name: AM key
  copy:
    content: "{{ am_certificate[item]['key'] }}"
    dest: "{{ am_shared_secrets }}/{{ item }}.key"
    mode: '600'
  register: am_k

- block:
  - set_fact:
      am_keystore_path: "{{ amster_am_install['cfgDir'] }}/{{ am_context }}/keystore.jceks"
      am_storepass: "{{ amster_am_install['cfgDir'] }}/{{ am_context }}/.storepass"
      am_keypass: "{{ amster_am_install['cfgDir'] }}/{{ am_context }}/.keypass"

  - name: Get keystore password
    ansible.builtin.slurp:
      src: "{{ am_storepass }}"
    register: keystore_password

  - name: Get keystore password
    ansible.builtin.slurp:
      src: "{{ am_keypass }}"
    register: key_password

  - name: Create AM p12
    shell:
      cmd: >
        openssl pkcs12 -export
        -in {{ am_shared_secrets }}/{{ item }}.crt
        -inkey {{ am_shared_secrets }}/{{ item }}.key
        -out {{ am_shared_secrets }}/{{ item }}.p12
        -name {{ am_certificate[item]['name']|default(item) }}
        -password 'pass:{{ key_password['content']|b64decode }}'

  - name: Remove certificate
    java_cert:
      cert_alias: "{{ am_certificate[item]['name']|default(item) }}"
      pkcs12_path: "{{ am_shared_secrets }}/{{ item }}.p12"
      keystore_path: "{{ am_keystore_path }}"
      keystore_pass: "{{ keystore_password['content']|b64decode }}"
      keystore_type: JCEKS
      executable: "{{ am_certificate[item]['keytool'] }}"
      state: absent
    ignore_errors: yes # might not exist

  - name: Add certificate
    java_cert:
      pkcs12_path: "{{ am_shared_secrets }}/{{ item }}.p12"
      pkcs12_alias: "{{ am_certificate[item]['name']|default(item) }}"
      pkcs12_password: "{{ key_password['content']|b64decode }}"
      cert_alias: "{{ am_certificate[item]['name']|default(item) }}"
      keystore_path: "{{ am_keystore_path }}"
      keystore_pass: "{{ keystore_password['content']|b64decode }}"
      keystore_type: JCEKS
      executable: "{{ am_certificate[item]['keytool'] }}"
      state: present
    notify: "{{ am_certificate[item]['notify']|default(omit) }}" # TODO
    register: magweg

  - name: Change key password
    shell:
      cmd: >
        {{ am_certificate[item]['keytool'] }} -keypasswd
        -keystore {{ am_keystore_path }}
        -storetype jceks
        -storepass {{ keystore_password['content']|b64decode }}
        -alias {{ am_certificate[item]['name']|default(item) }}
        -keypass {{ keystore_password['content']|b64decode }}
        -new {{ key_password['content']|b64decode }}
  when: am_c.changed or am_k.changed or am_certificate_force
